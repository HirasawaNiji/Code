import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# 读取训练数据
df = pd.read_csv('financial_data.csv')

# 选择特征和目标变量
features = df[['YYSR', 'YWFY', 'YYCB', 'YYSJJFJ', 'ZCJZSS']]
target = df['LRZE']

# 将数据分为训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(
    features, target, test_size=0.2, random_state=42)

# 数据标准化
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 创建并训练线性回归模型
linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)

# 获取系数
coefficients = linear_model.coef_

# 输出系数，不使用科学计数法，保留5位小数
pd.set_option('display.float_format', lambda x: '%.5f' % x)
print("Coefficients (a, b, c, d, e):", coefficients)

# 在测试集上进行预测
y_pred = linear_model.predict(X_test_scaled)

# 评价模型性能
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error on Test Set: {mse:.5f}')
print(f'R-squared on Test Set: {r2:.5f}')
# 恢复默认的显示格式
pd.set_option('display.float_format', None)

# 残差分析
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.title('Residual Analysis')
plt.show()

# 读取测试数据
test_data = pd.read_csv('test.csv')

# 选择测试数据的特征
test_features = test_data[['YYSR', 'YWFY', 'YYCB', 'YYSJJFJ', 'ZCJZSS']]

# 数据标准化（使用之前训练集的标准化器）
test_features_scaled = scaler.transform(test_features)

# 使用模型进行预测
predicted_LRZE = (
    coefficients[0] * test_features_scaled[:, 0] +
    coefficients[1] * test_features_scaled[:, 1] +
    coefficients[2] * test_features_scaled[:, 2] +
    coefficients[3] * test_features_scaled[:, 3] +
    coefficients[4] * test_features_scaled[:, 4]
)

# 创建包含预测结果的 DataFrame
result_df = pd.DataFrame(
    {'TICKER_SYMBOL': test_data['TICKER_SYMBOL'], 'LRZE': predicted_LRZE})

# 将结果保存为表格
result_df.to_csv('predicted_LRZE_test_results.csv', index=False)
